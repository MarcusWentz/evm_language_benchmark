// SPDX-License-Identifier: MIT
struct error_same_value {}  

struct event_value_update {
    pub value: u256
}

contract simple_storage { //Note: This contract was compiled using with Linux Mint 21 which has "ldd -v" 2.35 with the binary inside a project folder with command "./fe_amd64 build a"
    // pub storage_slot_0: u256 //public variables not supported yet in Fe 0.23.0
    // pub owner: address      //public variables not supported yet in Fe 0.23.0
    storage_slot_0: u256
    owner: address

    pub fn storage_slot_0(self) -> u256 { // Manually return storage_slot_0 since we can't use pub yet automatically.
        return self.storage_slot_0
    }

    pub fn owner(self) -> address { // Manually return owner since we can't use pub yet automatically.
        return self.owner
    }

    pub fn __init__(mut self, ctx: Context) { //constructor
        self.owner = ctx.msg_sender()
        self.storage_slot_0 = ctx.block_timestamp()
    }

    pub fn set(mut self, mut ctx: Context, input: u256) {
        if input == self.storage_slot_0 {
            revert error_same_value()
        }
        self.storage_slot_0 = input
        ctx.emit(event_value_update(value: input)) 
    }

    pub fn owner_time_store(mut self, mut ctx: Context) {
        if ctx.msg_sender() != self.owner {
            revert error_same_value()
        }
        self.storage_slot_0 = ctx.block_timestamp()
        ctx.emit(event_value_update(value: ctx.block_timestamp())) 
    }
}

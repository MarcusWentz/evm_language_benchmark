;; SPDX-License-Identifier: MIT
(seq

  ;; Memory layout.
  ;(def 'mem-ret    0x00) ; Fixed due to compiler macro for return.
  (def 'mem-func   0x00) ; No conflict with mem-ret, so re-use.
  ;(def 'mem-keccak 0x00) ; No conflict with mem-func or mem-ret, so re-use.
  ;(def 'scratch0   0x20)
  ;(def 'scratch1   0x40)
  
  ;; Precomputed function IDs.
  (def 'get-value         0x20965255) ; getValue()
  (def 'set-value         0x55241077) ; setValue(uint256)
  (def 'get-owner         0x893d20e8) ; getOwner()
  (def 'owner-set-time    0xc5da17db) ; ownerSetTime()

  ;; Event IDs
  (def 'value-updated-id ; valueUpdated()
    0xc5ab16f1bddb259b10fe689dea60d8cce8e149cda6275168becc5bc11b2fc354)

  ;; Convenience macro for raising Events
  (def 'event1 (id)
    (seq
      (log1 0x00 0x00 id)))

  ;; Useful macros

  ;; Calldata (just the first argument, next argument would be at 0x24).
  ;(def 'calldata-argument-one (calldataload 0x04))
  
  ;;
  (def 'revert () (revert 0 0))
  
  ;; --------------------------------------------------------------------------
  ;; Gets the function ID and stores it in memory for reference.
  ;;   The function ID is in the leftmost four bytes of the call data.

  (def 'uses-functions
    (seq
      (mstore mem-func 0)
      (calldatacopy (+ mem-func 28) 0x00 4)))

  ;; --------------------------------------------------------------------------
  ;; Determines whether the stored function ID matches a known
  ;;   function hash and executes <code-body> if so.
  ;; @param function-hash The four-byte hash of a known function signature.
  ;; @param code-body The code to run in the case of a match.

  (def 'function (function-hash code-body)
    (when (= (mload mem-func) function-hash)
      code-body))

  ;; --------------------------------------------------------------------------
  ;; GUARDS
  
  ;; --------------------------------------------------------------------------
  ;; Will revert if sent any Ether. We use the macro immediately so as
  ;;   to abort if sent any Ether during contract deployment.

  (def 'not-payable
    (when (callvalue) (revert)))
  
  ;; --------------------------------------------------------------------------
  ;; Constructor

  ;; Do not accept Ether at contract deployment.
  not-payable

  ;; Assign all tokens initially to the owner of the contract.
  (sstore 0 (timestamp) )
  (sstore 1 (caller) )

  ;; --------------------------------------------------------------------------
  ;; CONTRACT CODE
  
  (returnlll
    (seq not-payable uses-functions
      
      (function get-value
        (return (sload 0)))
      
      (function get-owner
        (return (sload 1)))

      (function set-value (seq      ; Ideally we duplicate the value in (calldataload 0x04) like Huff to save gas not having to push 0x04 on to the stack (dup not detected for some reason).
        ;(when (sub 1 1) (revert))  ; expression==0 do not revert.
        ;(when (add 1 0) (revert))  ; expression!=0 revert.
        (when (eq (calldataload 0x04) (sload 0)) (revert))   ; Revert if calldata value and storage value are the same.
        (sstore 0 (calldataload 0x04)) ; Calldata (just the first argument, next argument would be at 0x24).
        (event1 value-updated-id)     
        (stop); //STOP THE PROGRAM COUNTER (RETURN DOES THE SAME THING.)
      ))

      (function owner-set-time (seq   ;Ideally we execute when caller and owner are equal but when seems to only except a single expression to execute. Could possibly work with a macro jump like Huff.
        (when (!= (caller) (sload 1)) (revert))
        (sstore 0 (timestamp))
        (event1 value-updated-id)
        (stop); //STOP THE PROGRAM COUNTER (RETURN DOES THE SAME THING.)
      ))

      ;; ----------------------------------------------------------------------
      ;; Fallback: No functions matched the function ID provided.

      (revert)))
  )
